Day1 :
Time Complexity and Space Complexity

Learn:
1.Growing Faster means bad algorithm. O(n) and O(logn). Here O(n) is groeing faster than O(logn) so it is a bad algorithm.
For single loops : 
2. For(... i = i + c or  i = i-c)  -> O(n)
3. For(.... i = i * c or i = i /c ) -> O(logn)
4.For(..... i = pow(i,c)) -> O(loglogn)

For multiple loops
5. Subsequent loops : add time complexities of loops one by one
6.Nested Loops : multiply time complexities of loops one by one

7.if two loops are having different order size n and m . Then time complexity should consist of both m and n  terms . O(n2) and O(m) . Total - > O(n2 + m) 

For Recursion
8. Find the recurrence in terms of T(n) or T(n/2) accordingly then Non recursive item would be the head of the tree . find the height of the tree.
and look how many times n is added to multiple(because of cn as non recursive part) . Ex - > T(n) = 2T(n/2) + cn
The time complexity would be O(nlogn) [Merge Sort]
9. T(n) = 2T(n-1) + c . Time complexity would be O(2^n) [Tower of Hannoi]
10 T(n) = T(n/2) + c . Time complexity would be O(logn) [Binary Search]
11.T(n) = 2T(n/2) + c. Time complexity would be O(n)

Steps:
A. Find total number of elements will be n or logn depending on the levels of inputs. [if for n=3 ,3 levels will be there then total term would be n]
B. find the pattern how total number we get in each level.
